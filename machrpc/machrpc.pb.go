// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: machrpc.proto

package machrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql    string       `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Params []*anypb.Any `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{0}
}

func (x *ExecRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *ExecRequest) GetParams() []*anypb.Any {
	if x != nil {
		return x.Params
	}
	return nil
}

type ExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *ExecResponse) Reset() {
	*x = ExecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResponse) ProtoMessage() {}

func (x *ExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResponse.ProtoReflect.Descriptor instead.
func (*ExecResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{1}
}

func (x *ExecResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExecResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExecResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type AppenderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName string `protobuf:"bytes,1,opt,name=tableName,proto3" json:"tableName,omitempty"`
}

func (x *AppenderRequest) Reset() {
	*x = AppenderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppenderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppenderRequest) ProtoMessage() {}

func (x *AppenderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppenderRequest.ProtoReflect.Descriptor instead.
func (*AppenderRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{2}
}

func (x *AppenderRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type AppenderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Handle  string `protobuf:"bytes,4,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *AppenderResponse) Reset() {
	*x = AppenderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppenderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppenderResponse) ProtoMessage() {}

func (x *AppenderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppenderResponse.ProtoReflect.Descriptor instead.
func (*AppenderResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{3}
}

func (x *AppenderResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AppenderResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AppenderResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *AppenderResponse) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

type AppendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle string       `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Params []*anypb.Any `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *AppendData) Reset() {
	*x = AppendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendData) ProtoMessage() {}

func (x *AppendData) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendData.ProtoReflect.Descriptor instead.
func (*AppendData) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{4}
}

func (x *AppendData) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *AppendData) GetParams() []*anypb.Any {
	if x != nil {
		return x.Params
	}
	return nil
}

type AppendDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *AppendDone) Reset() {
	*x = AppendDone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendDone) ProtoMessage() {}

func (x *AppendDone) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendDone.ProtoReflect.Descriptor instead.
func (*AppendDone) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{5}
}

func (x *AppendDone) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AppendDone) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AppendDone) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type ExplainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (x *ExplainRequest) Reset() {
	*x = ExplainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainRequest) ProtoMessage() {}

func (x *ExplainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainRequest.ProtoReflect.Descriptor instead.
func (*ExplainRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{6}
}

func (x *ExplainRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

type ExplainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Plan    string `protobuf:"bytes,4,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *ExplainResponse) Reset() {
	*x = ExplainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainResponse) ProtoMessage() {}

func (x *ExplainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainResponse.ProtoReflect.Descriptor instead.
func (*ExplainResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{7}
}

func (x *ExplainResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExplainResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExplainResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *ExplainResponse) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql    string       `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Params []*anypb.Any `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{8}
}

func (x *QueryRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *QueryRequest) GetParams() []*anypb.Any {
	if x != nil {
		return x.Params
	}
	return nil
}

type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    bool        `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason     string      `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse     string      `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	RowsHandle *RowsHandle `protobuf:"bytes,4,opt,name=rowsHandle,proto3" json:"rowsHandle,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{9}
}

func (x *QueryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *QueryResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *QueryResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *QueryResponse) GetRowsHandle() *RowsHandle {
	if x != nil {
		return x.RowsHandle
	}
	return nil
}

type ColumnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string    `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string    `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Columns []*Column `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *ColumnsResponse) Reset() {
	*x = ColumnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnsResponse) ProtoMessage() {}

func (x *ColumnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnsResponse.ProtoReflect.Descriptor instead.
func (*ColumnsResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{10}
}

func (x *ColumnsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ColumnsResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ColumnsResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *ColumnsResponse) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Size   int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Length int32  `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{11}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Column) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Column) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type RowsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *RowsHandle) Reset() {
	*x = RowsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowsHandle) ProtoMessage() {}

func (x *RowsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowsHandle.ProtoReflect.Descriptor instead.
func (*RowsHandle) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{12}
}

func (x *RowsHandle) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

type RowsFetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason    string       `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse    string       `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	HasNoRows bool         `protobuf:"varint,4,opt,name=hasNoRows,proto3" json:"hasNoRows,omitempty"`
	Values    []*anypb.Any `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *RowsFetchResponse) Reset() {
	*x = RowsFetchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowsFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowsFetchResponse) ProtoMessage() {}

func (x *RowsFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowsFetchResponse.ProtoReflect.Descriptor instead.
func (*RowsFetchResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{13}
}

func (x *RowsFetchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RowsFetchResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RowsFetchResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *RowsFetchResponse) GetHasNoRows() bool {
	if x != nil {
		return x.HasNoRows
	}
	return false
}

func (x *RowsFetchResponse) GetValues() []*anypb.Any {
	if x != nil {
		return x.Values
	}
	return nil
}

type RowsCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *RowsCloseResponse) Reset() {
	*x = RowsCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowsCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowsCloseResponse) ProtoMessage() {}

func (x *RowsCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowsCloseResponse.ProtoReflect.Descriptor instead.
func (*RowsCloseResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{14}
}

func (x *RowsCloseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RowsCloseResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RowsCloseResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type QueryRowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql    string       `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Params []*anypb.Any `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryRowRequest) Reset() {
	*x = QueryRowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRowRequest) ProtoMessage() {}

func (x *QueryRowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRowRequest.ProtoReflect.Descriptor instead.
func (*QueryRowRequest) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{15}
}

func (x *QueryRowRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *QueryRowRequest) GetParams() []*anypb.Any {
	if x != nil {
		return x.Params
	}
	return nil
}

type QueryRowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool         `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason       string       `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse       string       `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Values       []*anypb.Any `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	AffectedRows int64        `protobuf:"varint,5,opt,name=affectedRows,proto3" json:"affectedRows,omitempty"`
}

func (x *QueryRowResponse) Reset() {
	*x = QueryRowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_machrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRowResponse) ProtoMessage() {}

func (x *QueryRowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_machrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRowResponse.ProtoReflect.Descriptor instead.
func (*QueryRowResponse) Descriptor() ([]byte, []int) {
	return file_machrpc_proto_rawDescGZIP(), []int{16}
}

func (x *QueryRowResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *QueryRowResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *QueryRowResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *QueryRowResponse) GetValues() []*anypb.Any {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *QueryRowResponse) GetAffectedRows() int64 {
	if x != nil {
		return x.AffectedRows
	}
	return 0
}

var File_machrpc_proto protoreflect.FileDescriptor

var file_machrpc_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x71, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x58, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x0f,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a,
	0x10, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x22, 0x52, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x56, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x22,
	0x22, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x71, 0x6c, 0x22, 0x6f, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6c, 0x61, 0x6e, 0x22, 0x4e, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x6f, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x73, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x5c,
	0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x24, 0x0a, 0x0a,
	0x52, 0x6f, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x52, 0x6f, 0x77, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x4e, 0x6f, 0x52, 0x6f, 0x77, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4e, 0x6f, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5d,
	0x0a, 0x11, 0x52, 0x6f, 0x77, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x22, 0x51, 0x0a,
	0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x71, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0xae, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77,
	0x73, 0x32, 0xb5, 0x04, 0x0a, 0x08, 0x4d, 0x61, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x04, 0x45, 0x78, 0x65, 0x63, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d,
	0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f,
	0x77, 0x12, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x15, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72,
	0x70, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x13, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x09, 0x52, 0x6f, 0x77, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x09, 0x52, 0x6f, 0x77, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x13, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x1a, 0x1a, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x08, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x6d, 0x61, 0x63,
	0x68, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x36, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x13, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x13, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x3e, 0x0a, 0x07, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x6e, 0x65, 0x6f, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x6d, 0x61, 0x63, 0x68,
	0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_machrpc_proto_rawDescOnce sync.Once
	file_machrpc_proto_rawDescData = file_machrpc_proto_rawDesc
)

func file_machrpc_proto_rawDescGZIP() []byte {
	file_machrpc_proto_rawDescOnce.Do(func() {
		file_machrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_machrpc_proto_rawDescData)
	})
	return file_machrpc_proto_rawDescData
}

var file_machrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_machrpc_proto_goTypes = []interface{}{
	(*ExecRequest)(nil),       // 0: machrpc.ExecRequest
	(*ExecResponse)(nil),      // 1: machrpc.ExecResponse
	(*AppenderRequest)(nil),   // 2: machrpc.AppenderRequest
	(*AppenderResponse)(nil),  // 3: machrpc.AppenderResponse
	(*AppendData)(nil),        // 4: machrpc.AppendData
	(*AppendDone)(nil),        // 5: machrpc.AppendDone
	(*ExplainRequest)(nil),    // 6: machrpc.ExplainRequest
	(*ExplainResponse)(nil),   // 7: machrpc.ExplainResponse
	(*QueryRequest)(nil),      // 8: machrpc.QueryRequest
	(*QueryResponse)(nil),     // 9: machrpc.QueryResponse
	(*ColumnsResponse)(nil),   // 10: machrpc.ColumnsResponse
	(*Column)(nil),            // 11: machrpc.Column
	(*RowsHandle)(nil),        // 12: machrpc.RowsHandle
	(*RowsFetchResponse)(nil), // 13: machrpc.RowsFetchResponse
	(*RowsCloseResponse)(nil), // 14: machrpc.RowsCloseResponse
	(*QueryRowRequest)(nil),   // 15: machrpc.QueryRowRequest
	(*QueryRowResponse)(nil),  // 16: machrpc.QueryRowResponse
	(*anypb.Any)(nil),         // 17: google.protobuf.Any
}
var file_machrpc_proto_depIdxs = []int32{
	17, // 0: machrpc.ExecRequest.params:type_name -> google.protobuf.Any
	17, // 1: machrpc.AppendData.params:type_name -> google.protobuf.Any
	17, // 2: machrpc.QueryRequest.params:type_name -> google.protobuf.Any
	12, // 3: machrpc.QueryResponse.rowsHandle:type_name -> machrpc.RowsHandle
	11, // 4: machrpc.ColumnsResponse.columns:type_name -> machrpc.Column
	17, // 5: machrpc.RowsFetchResponse.values:type_name -> google.protobuf.Any
	17, // 6: machrpc.QueryRowRequest.params:type_name -> google.protobuf.Any
	17, // 7: machrpc.QueryRowResponse.values:type_name -> google.protobuf.Any
	0,  // 8: machrpc.Machbase.Exec:input_type -> machrpc.ExecRequest
	15, // 9: machrpc.Machbase.QueryRow:input_type -> machrpc.QueryRowRequest
	8,  // 10: machrpc.Machbase.Query:input_type -> machrpc.QueryRequest
	12, // 11: machrpc.Machbase.Columns:input_type -> machrpc.RowsHandle
	12, // 12: machrpc.Machbase.RowsFetch:input_type -> machrpc.RowsHandle
	12, // 13: machrpc.Machbase.RowsClose:input_type -> machrpc.RowsHandle
	2,  // 14: machrpc.Machbase.Appender:input_type -> machrpc.AppenderRequest
	4,  // 15: machrpc.Machbase.Append:input_type -> machrpc.AppendData
	6,  // 16: machrpc.Machbase.Explain:input_type -> machrpc.ExplainRequest
	1,  // 17: machrpc.Machbase.Exec:output_type -> machrpc.ExecResponse
	16, // 18: machrpc.Machbase.QueryRow:output_type -> machrpc.QueryRowResponse
	9,  // 19: machrpc.Machbase.Query:output_type -> machrpc.QueryResponse
	10, // 20: machrpc.Machbase.Columns:output_type -> machrpc.ColumnsResponse
	13, // 21: machrpc.Machbase.RowsFetch:output_type -> machrpc.RowsFetchResponse
	14, // 22: machrpc.Machbase.RowsClose:output_type -> machrpc.RowsCloseResponse
	3,  // 23: machrpc.Machbase.Appender:output_type -> machrpc.AppenderResponse
	5,  // 24: machrpc.Machbase.Append:output_type -> machrpc.AppendDone
	7,  // 25: machrpc.Machbase.Explain:output_type -> machrpc.ExplainResponse
	17, // [17:26] is the sub-list for method output_type
	8,  // [8:17] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_machrpc_proto_init() }
func file_machrpc_proto_init() {
	if File_machrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_machrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppenderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppenderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowsFetchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowsCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_machrpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_machrpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_machrpc_proto_goTypes,
		DependencyIndexes: file_machrpc_proto_depIdxs,
		MessageInfos:      file_machrpc_proto_msgTypes,
	}.Build()
	File_machrpc_proto = out.File
	file_machrpc_proto_rawDesc = nil
	file_machrpc_proto_goTypes = nil
	file_machrpc_proto_depIdxs = nil
}
