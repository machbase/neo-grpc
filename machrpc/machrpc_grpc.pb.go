// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: machrpc.proto

package machrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Machbase_Conn_FullMethodName            = "/machrpc.Machbase/Conn"
	Machbase_ConnClose_FullMethodName       = "/machrpc.Machbase/ConnClose"
	Machbase_Ping_FullMethodName            = "/machrpc.Machbase/Ping"
	Machbase_Exec_FullMethodName            = "/machrpc.Machbase/Exec"
	Machbase_QueryRow_FullMethodName        = "/machrpc.Machbase/QueryRow"
	Machbase_Query_FullMethodName           = "/machrpc.Machbase/Query"
	Machbase_Columns_FullMethodName         = "/machrpc.Machbase/Columns"
	Machbase_RowsFetch_FullMethodName       = "/machrpc.Machbase/RowsFetch"
	Machbase_RowsClose_FullMethodName       = "/machrpc.Machbase/RowsClose"
	Machbase_Appender_FullMethodName        = "/machrpc.Machbase/Appender"
	Machbase_AppenderClose_FullMethodName   = "/machrpc.Machbase/AppenderClose"
	Machbase_Append_FullMethodName          = "/machrpc.Machbase/Append"
	Machbase_Explain_FullMethodName         = "/machrpc.Machbase/Explain"
	Machbase_UserAuth_FullMethodName        = "/machrpc.Machbase/UserAuth"
	Machbase_GetServerInfo_FullMethodName   = "/machrpc.Machbase/GetServerInfo"
	Machbase_GetServicePorts_FullMethodName = "/machrpc.Machbase/GetServicePorts"
)

// MachbaseClient is the client API for Machbase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachbaseClient interface {
	Conn(ctx context.Context, in *ConnRequest, opts ...grpc.CallOption) (*ConnResponse, error)
	ConnClose(ctx context.Context, in *ConnCloseRequest, opts ...grpc.CallOption) (*ConnCloseResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	QueryRow(ctx context.Context, in *QueryRowRequest, opts ...grpc.CallOption) (*QueryRowResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	Columns(ctx context.Context, in *RowsHandle, opts ...grpc.CallOption) (*ColumnsResponse, error)
	RowsFetch(ctx context.Context, in *RowsHandle, opts ...grpc.CallOption) (*RowsFetchResponse, error)
	RowsClose(ctx context.Context, in *RowsHandle, opts ...grpc.CallOption) (*RowsCloseResponse, error)
	Appender(ctx context.Context, in *AppenderRequest, opts ...grpc.CallOption) (*AppenderResponse, error)
	AppenderClose(ctx context.Context, in *AppenderHandle, opts ...grpc.CallOption) (*AppenderCloseResponse, error)
	Append(ctx context.Context, opts ...grpc.CallOption) (Machbase_AppendClient, error)
	Explain(ctx context.Context, in *ExplainRequest, opts ...grpc.CallOption) (*ExplainResponse, error)
	UserAuth(ctx context.Context, in *UserAuthRequest, opts ...grpc.CallOption) (*UserAuthResponse, error)
	GetServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfo, error)
	GetServicePorts(ctx context.Context, in *ServicePortsRequest, opts ...grpc.CallOption) (*ServicePorts, error)
}

type machbaseClient struct {
	cc grpc.ClientConnInterface
}

func NewMachbaseClient(cc grpc.ClientConnInterface) MachbaseClient {
	return &machbaseClient{cc}
}

func (c *machbaseClient) Conn(ctx context.Context, in *ConnRequest, opts ...grpc.CallOption) (*ConnResponse, error) {
	out := new(ConnResponse)
	err := c.cc.Invoke(ctx, Machbase_Conn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) ConnClose(ctx context.Context, in *ConnCloseRequest, opts ...grpc.CallOption) (*ConnCloseResponse, error) {
	out := new(ConnCloseResponse)
	err := c.cc.Invoke(ctx, Machbase_ConnClose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Machbase_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, Machbase_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) QueryRow(ctx context.Context, in *QueryRowRequest, opts ...grpc.CallOption) (*QueryRowResponse, error) {
	out := new(QueryRowResponse)
	err := c.cc.Invoke(ctx, Machbase_QueryRow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, Machbase_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) Columns(ctx context.Context, in *RowsHandle, opts ...grpc.CallOption) (*ColumnsResponse, error) {
	out := new(ColumnsResponse)
	err := c.cc.Invoke(ctx, Machbase_Columns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) RowsFetch(ctx context.Context, in *RowsHandle, opts ...grpc.CallOption) (*RowsFetchResponse, error) {
	out := new(RowsFetchResponse)
	err := c.cc.Invoke(ctx, Machbase_RowsFetch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) RowsClose(ctx context.Context, in *RowsHandle, opts ...grpc.CallOption) (*RowsCloseResponse, error) {
	out := new(RowsCloseResponse)
	err := c.cc.Invoke(ctx, Machbase_RowsClose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) Appender(ctx context.Context, in *AppenderRequest, opts ...grpc.CallOption) (*AppenderResponse, error) {
	out := new(AppenderResponse)
	err := c.cc.Invoke(ctx, Machbase_Appender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) AppenderClose(ctx context.Context, in *AppenderHandle, opts ...grpc.CallOption) (*AppenderCloseResponse, error) {
	out := new(AppenderCloseResponse)
	err := c.cc.Invoke(ctx, Machbase_AppenderClose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) Append(ctx context.Context, opts ...grpc.CallOption) (Machbase_AppendClient, error) {
	stream, err := c.cc.NewStream(ctx, &Machbase_ServiceDesc.Streams[0], Machbase_Append_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &machbaseAppendClient{stream}
	return x, nil
}

type Machbase_AppendClient interface {
	Send(*AppendData) error
	CloseAndRecv() (*AppendDone, error)
	grpc.ClientStream
}

type machbaseAppendClient struct {
	grpc.ClientStream
}

func (x *machbaseAppendClient) Send(m *AppendData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *machbaseAppendClient) CloseAndRecv() (*AppendDone, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AppendDone)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *machbaseClient) Explain(ctx context.Context, in *ExplainRequest, opts ...grpc.CallOption) (*ExplainResponse, error) {
	out := new(ExplainResponse)
	err := c.cc.Invoke(ctx, Machbase_Explain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) UserAuth(ctx context.Context, in *UserAuthRequest, opts ...grpc.CallOption) (*UserAuthResponse, error) {
	out := new(UserAuthResponse)
	err := c.cc.Invoke(ctx, Machbase_UserAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) GetServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, Machbase_GetServerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machbaseClient) GetServicePorts(ctx context.Context, in *ServicePortsRequest, opts ...grpc.CallOption) (*ServicePorts, error) {
	out := new(ServicePorts)
	err := c.cc.Invoke(ctx, Machbase_GetServicePorts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachbaseServer is the server API for Machbase service.
// All implementations must embed UnimplementedMachbaseServer
// for forward compatibility
type MachbaseServer interface {
	Conn(context.Context, *ConnRequest) (*ConnResponse, error)
	ConnClose(context.Context, *ConnCloseRequest) (*ConnCloseResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	QueryRow(context.Context, *QueryRowRequest) (*QueryRowResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	Columns(context.Context, *RowsHandle) (*ColumnsResponse, error)
	RowsFetch(context.Context, *RowsHandle) (*RowsFetchResponse, error)
	RowsClose(context.Context, *RowsHandle) (*RowsCloseResponse, error)
	Appender(context.Context, *AppenderRequest) (*AppenderResponse, error)
	AppenderClose(context.Context, *AppenderHandle) (*AppenderCloseResponse, error)
	Append(Machbase_AppendServer) error
	Explain(context.Context, *ExplainRequest) (*ExplainResponse, error)
	UserAuth(context.Context, *UserAuthRequest) (*UserAuthResponse, error)
	GetServerInfo(context.Context, *ServerInfoRequest) (*ServerInfo, error)
	GetServicePorts(context.Context, *ServicePortsRequest) (*ServicePorts, error)
	mustEmbedUnimplementedMachbaseServer()
}

// UnimplementedMachbaseServer must be embedded to have forward compatible implementations.
type UnimplementedMachbaseServer struct {
}

func (UnimplementedMachbaseServer) Conn(context.Context, *ConnRequest) (*ConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Conn not implemented")
}
func (UnimplementedMachbaseServer) ConnClose(context.Context, *ConnCloseRequest) (*ConnCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnClose not implemented")
}
func (UnimplementedMachbaseServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMachbaseServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedMachbaseServer) QueryRow(context.Context, *QueryRowRequest) (*QueryRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRow not implemented")
}
func (UnimplementedMachbaseServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedMachbaseServer) Columns(context.Context, *RowsHandle) (*ColumnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Columns not implemented")
}
func (UnimplementedMachbaseServer) RowsFetch(context.Context, *RowsHandle) (*RowsFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RowsFetch not implemented")
}
func (UnimplementedMachbaseServer) RowsClose(context.Context, *RowsHandle) (*RowsCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RowsClose not implemented")
}
func (UnimplementedMachbaseServer) Appender(context.Context, *AppenderRequest) (*AppenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Appender not implemented")
}
func (UnimplementedMachbaseServer) AppenderClose(context.Context, *AppenderHandle) (*AppenderCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppenderClose not implemented")
}
func (UnimplementedMachbaseServer) Append(Machbase_AppendServer) error {
	return status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedMachbaseServer) Explain(context.Context, *ExplainRequest) (*ExplainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Explain not implemented")
}
func (UnimplementedMachbaseServer) UserAuth(context.Context, *UserAuthRequest) (*UserAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuth not implemented")
}
func (UnimplementedMachbaseServer) GetServerInfo(context.Context, *ServerInfoRequest) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedMachbaseServer) GetServicePorts(context.Context, *ServicePortsRequest) (*ServicePorts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicePorts not implemented")
}
func (UnimplementedMachbaseServer) mustEmbedUnimplementedMachbaseServer() {}

// UnsafeMachbaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachbaseServer will
// result in compilation errors.
type UnsafeMachbaseServer interface {
	mustEmbedUnimplementedMachbaseServer()
}

func RegisterMachbaseServer(s grpc.ServiceRegistrar, srv MachbaseServer) {
	s.RegisterService(&Machbase_ServiceDesc, srv)
}

func _Machbase_Conn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).Conn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_Conn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).Conn(ctx, req.(*ConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_ConnClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).ConnClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_ConnClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).ConnClose(ctx, req.(*ConnCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_QueryRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).QueryRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_QueryRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).QueryRow(ctx, req.(*QueryRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_Columns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RowsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).Columns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_Columns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).Columns(ctx, req.(*RowsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_RowsFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RowsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).RowsFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_RowsFetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).RowsFetch(ctx, req.(*RowsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_RowsClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RowsHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).RowsClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_RowsClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).RowsClose(ctx, req.(*RowsHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_Appender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).Appender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_Appender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).Appender(ctx, req.(*AppenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_AppenderClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppenderHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).AppenderClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_AppenderClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).AppenderClose(ctx, req.(*AppenderHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_Append_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MachbaseServer).Append(&machbaseAppendServer{stream})
}

type Machbase_AppendServer interface {
	SendAndClose(*AppendDone) error
	Recv() (*AppendData, error)
	grpc.ServerStream
}

type machbaseAppendServer struct {
	grpc.ServerStream
}

func (x *machbaseAppendServer) SendAndClose(m *AppendDone) error {
	return x.ServerStream.SendMsg(m)
}

func (x *machbaseAppendServer) Recv() (*AppendData, error) {
	m := new(AppendData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Machbase_Explain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).Explain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_Explain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).Explain(ctx, req.(*ExplainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_UserAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).UserAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_UserAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).UserAuth(ctx, req.(*UserAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_GetServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).GetServerInfo(ctx, req.(*ServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machbase_GetServicePorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicePortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachbaseServer).GetServicePorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machbase_GetServicePorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachbaseServer).GetServicePorts(ctx, req.(*ServicePortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Machbase_ServiceDesc is the grpc.ServiceDesc for Machbase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Machbase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "machrpc.Machbase",
	HandlerType: (*MachbaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Conn",
			Handler:    _Machbase_Conn_Handler,
		},
		{
			MethodName: "ConnClose",
			Handler:    _Machbase_ConnClose_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Machbase_Ping_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Machbase_Exec_Handler,
		},
		{
			MethodName: "QueryRow",
			Handler:    _Machbase_QueryRow_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Machbase_Query_Handler,
		},
		{
			MethodName: "Columns",
			Handler:    _Machbase_Columns_Handler,
		},
		{
			MethodName: "RowsFetch",
			Handler:    _Machbase_RowsFetch_Handler,
		},
		{
			MethodName: "RowsClose",
			Handler:    _Machbase_RowsClose_Handler,
		},
		{
			MethodName: "Appender",
			Handler:    _Machbase_Appender_Handler,
		},
		{
			MethodName: "AppenderClose",
			Handler:    _Machbase_AppenderClose_Handler,
		},
		{
			MethodName: "Explain",
			Handler:    _Machbase_Explain_Handler,
		},
		{
			MethodName: "UserAuth",
			Handler:    _Machbase_UserAuth_Handler,
		},
		{
			MethodName: "GetServerInfo",
			Handler:    _Machbase_GetServerInfo_Handler,
		},
		{
			MethodName: "GetServicePorts",
			Handler:    _Machbase_GetServicePorts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Append",
			Handler:       _Machbase_Append_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "machrpc.proto",
}
