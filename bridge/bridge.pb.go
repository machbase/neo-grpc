// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: bridge.proto

package bridge

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBridgeRequest) Reset() {
	*x = ListBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBridgeRequest) ProtoMessage() {}

func (x *ListBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBridgeRequest.ProtoReflect.Descriptor instead.
func (*ListBridgeRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{0}
}

type ListBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string    `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string    `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Bridges []*Bridge `protobuf:"bytes,4,rep,name=bridges,proto3" json:"bridges,omitempty"`
}

func (x *ListBridgeResponse) Reset() {
	*x = ListBridgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBridgeResponse) ProtoMessage() {}

func (x *ListBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBridgeResponse.ProtoReflect.Descriptor instead.
func (*ListBridgeResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{1}
}

func (x *ListBridgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListBridgeResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ListBridgeResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *ListBridgeResponse) GetBridges() []*Bridge {
	if x != nil {
		return x.Bridges
	}
	return nil
}

type Bridge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Bridge) Reset() {
	*x = Bridge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bridge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bridge) ProtoMessage() {}

func (x *Bridge) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bridge.ProtoReflect.Descriptor instead.
func (*Bridge) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{2}
}

func (x *Bridge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bridge) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Bridge) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type AddBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *AddBridgeRequest) Reset() {
	*x = AddBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBridgeRequest) ProtoMessage() {}

func (x *AddBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBridgeRequest.ProtoReflect.Descriptor instead.
func (*AddBridgeRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{3}
}

func (x *AddBridgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddBridgeRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddBridgeRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type AddBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *AddBridgeResponse) Reset() {
	*x = AddBridgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBridgeResponse) ProtoMessage() {}

func (x *AddBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBridgeResponse.ProtoReflect.Descriptor instead.
func (*AddBridgeResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{4}
}

func (x *AddBridgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddBridgeResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AddBridgeResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type GetBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetBridgeRequest) Reset() {
	*x = GetBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgeRequest) ProtoMessage() {}

func (x *GetBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgeRequest.ProtoReflect.Descriptor instead.
func (*GetBridgeRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{5}
}

func (x *GetBridgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string  `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string  `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Bridge  *Bridge `protobuf:"bytes,4,opt,name=bridge,proto3" json:"bridge,omitempty"`
}

func (x *GetBridgeResponse) Reset() {
	*x = GetBridgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgeResponse) ProtoMessage() {}

func (x *GetBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgeResponse.ProtoReflect.Descriptor instead.
func (*GetBridgeResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{6}
}

func (x *GetBridgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetBridgeResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetBridgeResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *GetBridgeResponse) GetBridge() *Bridge {
	if x != nil {
		return x.Bridge
	}
	return nil
}

type DelBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DelBridgeRequest) Reset() {
	*x = DelBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelBridgeRequest) ProtoMessage() {}

func (x *DelBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelBridgeRequest.ProtoReflect.Descriptor instead.
func (*DelBridgeRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{7}
}

func (x *DelBridgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DelBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *DelBridgeResponse) Reset() {
	*x = DelBridgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelBridgeResponse) ProtoMessage() {}

func (x *DelBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelBridgeResponse.ProtoReflect.Descriptor instead.
func (*DelBridgeResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{8}
}

func (x *DelBridgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DelBridgeResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DelBridgeResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type TestBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TestBridgeRequest) Reset() {
	*x = TestBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestBridgeRequest) ProtoMessage() {}

func (x *TestBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestBridgeRequest.ProtoReflect.Descriptor instead.
func (*TestBridgeRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{9}
}

func (x *TestBridgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TestBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *TestBridgeResponse) Reset() {
	*x = TestBridgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestBridgeResponse) ProtoMessage() {}

func (x *TestBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestBridgeResponse.ProtoReflect.Descriptor instead.
func (*TestBridgeResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{10}
}

func (x *TestBridgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TestBridgeResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TestBridgeResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

type ExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Command string   `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Params  []*Datum `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *ExecRequest) Reset() {
	*x = ExecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRequest) ProtoMessage() {}

func (x *ExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRequest.ProtoReflect.Descriptor instead.
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{11}
}

func (x *ExecRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ExecRequest) GetParams() []*Datum {
	if x != nil {
		return x.Params
	}
	return nil
}

type ExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string  `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string  `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	Result  *Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ExecResponse) Reset() {
	*x = ExecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResponse) ProtoMessage() {}

func (x *ExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResponse.ProtoReflect.Descriptor instead.
func (*ExecResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{12}
}

func (x *ExecResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExecResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ExecResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *ExecResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle string         `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Fields []*ResultField `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{13}
}

func (x *Result) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *Result) GetFields() []*ResultField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ResultField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Size   int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Length int32  `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *ResultField) Reset() {
	*x = ResultField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultField) ProtoMessage() {}

func (x *ResultField) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultField.ProtoReflect.Descriptor instead.
func (*ResultField) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{14}
}

func (x *ResultField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResultField) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResultField) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ResultField) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type ResultFetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason    string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse    string   `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
	HasNoRows bool     `protobuf:"varint,4,opt,name=hasNoRows,proto3" json:"hasNoRows,omitempty"`
	Values    []*Datum `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ResultFetchResponse) Reset() {
	*x = ResultFetchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultFetchResponse) ProtoMessage() {}

func (x *ResultFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultFetchResponse.ProtoReflect.Descriptor instead.
func (*ResultFetchResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{15}
}

func (x *ResultFetchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResultFetchResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ResultFetchResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

func (x *ResultFetchResponse) GetHasNoRows() bool {
	if x != nil {
		return x.HasNoRows
	}
	return false
}

func (x *ResultFetchResponse) GetValues() []*Datum {
	if x != nil {
		return x.Values
	}
	return nil
}

type Datum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Datum_VInt32
	//	*Datum_VUint32
	//	*Datum_VInt64
	//	*Datum_VUint64
	//	*Datum_VFloat
	//	*Datum_VDouble
	//	*Datum_VString
	//	*Datum_VBool
	//	*Datum_VBytes
	//	*Datum_VIp
	//	*Datum_VTime
	//	*Datum_VNull
	Value isDatum_Value `protobuf_oneof:"value"`
}

func (x *Datum) Reset() {
	*x = Datum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datum) ProtoMessage() {}

func (x *Datum) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datum.ProtoReflect.Descriptor instead.
func (*Datum) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{16}
}

func (m *Datum) GetValue() isDatum_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Datum) GetVInt32() int32 {
	if x, ok := x.GetValue().(*Datum_VInt32); ok {
		return x.VInt32
	}
	return 0
}

func (x *Datum) GetVUint32() uint32 {
	if x, ok := x.GetValue().(*Datum_VUint32); ok {
		return x.VUint32
	}
	return 0
}

func (x *Datum) GetVInt64() int64 {
	if x, ok := x.GetValue().(*Datum_VInt64); ok {
		return x.VInt64
	}
	return 0
}

func (x *Datum) GetVUint64() uint64 {
	if x, ok := x.GetValue().(*Datum_VUint64); ok {
		return x.VUint64
	}
	return 0
}

func (x *Datum) GetVFloat() float32 {
	if x, ok := x.GetValue().(*Datum_VFloat); ok {
		return x.VFloat
	}
	return 0
}

func (x *Datum) GetVDouble() float64 {
	if x, ok := x.GetValue().(*Datum_VDouble); ok {
		return x.VDouble
	}
	return 0
}

func (x *Datum) GetVString() string {
	if x, ok := x.GetValue().(*Datum_VString); ok {
		return x.VString
	}
	return ""
}

func (x *Datum) GetVBool() bool {
	if x, ok := x.GetValue().(*Datum_VBool); ok {
		return x.VBool
	}
	return false
}

func (x *Datum) GetVBytes() []byte {
	if x, ok := x.GetValue().(*Datum_VBytes); ok {
		return x.VBytes
	}
	return nil
}

func (x *Datum) GetVIp() string {
	if x, ok := x.GetValue().(*Datum_VIp); ok {
		return x.VIp
	}
	return ""
}

func (x *Datum) GetVTime() int64 {
	if x, ok := x.GetValue().(*Datum_VTime); ok {
		return x.VTime
	}
	return 0
}

func (x *Datum) GetVNull() bool {
	if x, ok := x.GetValue().(*Datum_VNull); ok {
		return x.VNull
	}
	return false
}

type isDatum_Value interface {
	isDatum_Value()
}

type Datum_VInt32 struct {
	VInt32 int32 `protobuf:"varint,1,opt,name=v_int32,json=vInt32,proto3,oneof"`
}

type Datum_VUint32 struct {
	VUint32 uint32 `protobuf:"varint,11,opt,name=v_uint32,json=vUint32,proto3,oneof"`
}

type Datum_VInt64 struct {
	VInt64 int64 `protobuf:"varint,2,opt,name=v_int64,json=vInt64,proto3,oneof"`
}

type Datum_VUint64 struct {
	VUint64 uint64 `protobuf:"varint,12,opt,name=v_uint64,json=vUint64,proto3,oneof"`
}

type Datum_VFloat struct {
	VFloat float32 `protobuf:"fixed32,3,opt,name=v_float,json=vFloat,proto3,oneof"`
}

type Datum_VDouble struct {
	VDouble float64 `protobuf:"fixed64,4,opt,name=v_double,json=vDouble,proto3,oneof"`
}

type Datum_VString struct {
	VString string `protobuf:"bytes,5,opt,name=v_string,json=vString,proto3,oneof"`
}

type Datum_VBool struct {
	VBool bool `protobuf:"varint,6,opt,name=v_bool,json=vBool,proto3,oneof"`
}

type Datum_VBytes struct {
	VBytes []byte `protobuf:"bytes,7,opt,name=v_bytes,json=vBytes,proto3,oneof"`
}

type Datum_VIp struct {
	VIp string `protobuf:"bytes,8,opt,name=v_ip,json=vIp,proto3,oneof"`
}

type Datum_VTime struct {
	VTime int64 `protobuf:"varint,9,opt,name=v_time,json=vTime,proto3,oneof"`
}

type Datum_VNull struct {
	VNull bool `protobuf:"varint,10,opt,name=v_null,json=vNull,proto3,oneof"`
}

func (*Datum_VInt32) isDatum_Value() {}

func (*Datum_VUint32) isDatum_Value() {}

func (*Datum_VInt64) isDatum_Value() {}

func (*Datum_VUint64) isDatum_Value() {}

func (*Datum_VFloat) isDatum_Value() {}

func (*Datum_VDouble) isDatum_Value() {}

func (*Datum_VString) isDatum_Value() {}

func (*Datum_VBool) isDatum_Value() {}

func (*Datum_VBytes) isDatum_Value() {}

func (*Datum_VIp) isDatum_Value() {}

func (*Datum_VTime) isDatum_Value() {}

func (*Datum_VNull) isDatum_Value() {}

type ResultCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Elapse  string `protobuf:"bytes,3,opt,name=elapse,proto3" json:"elapse,omitempty"`
}

func (x *ResultCloseResponse) Reset() {
	*x = ResultCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bridge_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultCloseResponse) ProtoMessage() {}

func (x *ResultCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bridge_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultCloseResponse.ProtoReflect.Descriptor instead.
func (*ResultCloseResponse) Descriptor() ([]byte, []int) {
	return file_bridge_proto_rawDescGZIP(), []int{17}
}

func (x *ResultCloseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResultCloseResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ResultCloseResponse) GetElapse() string {
	if x != nil {
		return x.Elapse
	}
	return ""
}

var File_bridge_proto protoreflect.FileDescriptor

var file_bridge_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x07, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x06, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x4e, 0x0a, 0x10,
	0x41, 0x64, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x5d, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x52, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x12, 0x54,
	0x65, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x0b, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0x80, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x4d, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x61, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x22, 0xa4, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x4e, 0x6f, 0x52,
	0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4e, 0x6f,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x75, 0x6d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x05,
	0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x76, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x1b, 0x0a, 0x08, 0x76, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x76, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x19, 0x0a,
	0x07, 0x76, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x06, 0x76, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x08, 0x76, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x76, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x06, 0x76, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x1b, 0x0a, 0x08, 0x76, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x76, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x08, 0x76, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x76, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x06, 0x76, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x76, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x76, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x13,
	0x0a, 0x04, 0x76, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x76, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x06, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x06,
	0x76, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05,
	0x76, 0x4e, 0x75, 0x6c, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f,
	0x0a, 0x13, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x32,
	0xe6, 0x02, 0x0a, 0x0a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x12, 0x18, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12,
	0x19, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xba, 0x01, 0x0a, 0x07, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x45, 0x78, 0x65, 0x63, 0x12, 0x13, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0e, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x6e, 0x65, 0x6f,
	0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bridge_proto_rawDescOnce sync.Once
	file_bridge_proto_rawDescData = file_bridge_proto_rawDesc
)

func file_bridge_proto_rawDescGZIP() []byte {
	file_bridge_proto_rawDescOnce.Do(func() {
		file_bridge_proto_rawDescData = protoimpl.X.CompressGZIP(file_bridge_proto_rawDescData)
	})
	return file_bridge_proto_rawDescData
}

var file_bridge_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_bridge_proto_goTypes = []interface{}{
	(*ListBridgeRequest)(nil),   // 0: bridge.ListBridgeRequest
	(*ListBridgeResponse)(nil),  // 1: bridge.ListBridgeResponse
	(*Bridge)(nil),              // 2: bridge.Bridge
	(*AddBridgeRequest)(nil),    // 3: bridge.AddBridgeRequest
	(*AddBridgeResponse)(nil),   // 4: bridge.AddBridgeResponse
	(*GetBridgeRequest)(nil),    // 5: bridge.GetBridgeRequest
	(*GetBridgeResponse)(nil),   // 6: bridge.GetBridgeResponse
	(*DelBridgeRequest)(nil),    // 7: bridge.DelBridgeRequest
	(*DelBridgeResponse)(nil),   // 8: bridge.DelBridgeResponse
	(*TestBridgeRequest)(nil),   // 9: bridge.TestBridgeRequest
	(*TestBridgeResponse)(nil),  // 10: bridge.TestBridgeResponse
	(*ExecRequest)(nil),         // 11: bridge.ExecRequest
	(*ExecResponse)(nil),        // 12: bridge.ExecResponse
	(*Result)(nil),              // 13: bridge.Result
	(*ResultField)(nil),         // 14: bridge.ResultField
	(*ResultFetchResponse)(nil), // 15: bridge.ResultFetchResponse
	(*Datum)(nil),               // 16: bridge.Datum
	(*ResultCloseResponse)(nil), // 17: bridge.ResultCloseResponse
}
var file_bridge_proto_depIdxs = []int32{
	2,  // 0: bridge.ListBridgeResponse.bridges:type_name -> bridge.Bridge
	2,  // 1: bridge.GetBridgeResponse.bridge:type_name -> bridge.Bridge
	16, // 2: bridge.ExecRequest.params:type_name -> bridge.Datum
	13, // 3: bridge.ExecResponse.result:type_name -> bridge.Result
	14, // 4: bridge.Result.fields:type_name -> bridge.ResultField
	16, // 5: bridge.ResultFetchResponse.values:type_name -> bridge.Datum
	0,  // 6: bridge.Management.ListBridge:input_type -> bridge.ListBridgeRequest
	3,  // 7: bridge.Management.AddBridge:input_type -> bridge.AddBridgeRequest
	5,  // 8: bridge.Management.GetBridge:input_type -> bridge.GetBridgeRequest
	7,  // 9: bridge.Management.DelBridge:input_type -> bridge.DelBridgeRequest
	9,  // 10: bridge.Management.TestBridge:input_type -> bridge.TestBridgeRequest
	11, // 11: bridge.Runtime.Exec:input_type -> bridge.ExecRequest
	13, // 12: bridge.Runtime.ResultFetch:input_type -> bridge.Result
	13, // 13: bridge.Runtime.ResultClose:input_type -> bridge.Result
	1,  // 14: bridge.Management.ListBridge:output_type -> bridge.ListBridgeResponse
	4,  // 15: bridge.Management.AddBridge:output_type -> bridge.AddBridgeResponse
	6,  // 16: bridge.Management.GetBridge:output_type -> bridge.GetBridgeResponse
	8,  // 17: bridge.Management.DelBridge:output_type -> bridge.DelBridgeResponse
	10, // 18: bridge.Management.TestBridge:output_type -> bridge.TestBridgeResponse
	12, // 19: bridge.Runtime.Exec:output_type -> bridge.ExecResponse
	15, // 20: bridge.Runtime.ResultFetch:output_type -> bridge.ResultFetchResponse
	17, // 21: bridge.Runtime.ResultClose:output_type -> bridge.ResultCloseResponse
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_bridge_proto_init() }
func file_bridge_proto_init() {
	if File_bridge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bridge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBridgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bridge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBridgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelBridgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestBridgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultFetchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bridge_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bridge_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Datum_VInt32)(nil),
		(*Datum_VUint32)(nil),
		(*Datum_VInt64)(nil),
		(*Datum_VUint64)(nil),
		(*Datum_VFloat)(nil),
		(*Datum_VDouble)(nil),
		(*Datum_VString)(nil),
		(*Datum_VBool)(nil),
		(*Datum_VBytes)(nil),
		(*Datum_VIp)(nil),
		(*Datum_VTime)(nil),
		(*Datum_VNull)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bridge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_bridge_proto_goTypes,
		DependencyIndexes: file_bridge_proto_depIdxs,
		MessageInfos:      file_bridge_proto_msgTypes,
	}.Build()
	File_bridge_proto = out.File
	file_bridge_proto_rawDesc = nil
	file_bridge_proto_goTypes = nil
	file_bridge_proto_depIdxs = nil
}
