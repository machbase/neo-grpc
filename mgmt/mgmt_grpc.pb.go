// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: mgmt.proto

package mgmt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementClient interface {
	ListKey(ctx context.Context, in *ListKeyRequest, opts ...grpc.CallOption) (*ListKeyResponse, error)
	GenKey(ctx context.Context, in *GenKeyRequest, opts ...grpc.CallOption) (*GenKeyResponse, error)
	DelKey(ctx context.Context, in *DelKeyRequest, opts ...grpc.CallOption) (*DelKeyResponse, error)
	ServerKey(ctx context.Context, in *ServerKeyRequest, opts ...grpc.CallOption) (*ServerKeyResponse, error)
	ListSshKey(ctx context.Context, in *ListSshKeyRequest, opts ...grpc.CallOption) (*ListSshKeyResponse, error)
	AddSshKey(ctx context.Context, in *AddSshKeyRequest, opts ...grpc.CallOption) (*AddSshKeyResponse, error)
	DelSshKey(ctx context.Context, in *DelSshKeyRequest, opts ...grpc.CallOption) (*DelSshKeyResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	ListConnector(ctx context.Context, in *ListConnectorRequest, opts ...grpc.CallOption) (*ListConnectorResponse, error)
	AddConnector(ctx context.Context, in *AddConnectorRequest, opts ...grpc.CallOption) (*AddConnectorResponse, error)
	DelConnector(ctx context.Context, in *DelConnectorRequest, opts ...grpc.CallOption) (*DelConnectorResponse, error)
	TestConnector(ctx context.Context, in *TestConnectorRequest, opts ...grpc.CallOption) (*TestConnectorResponse, error)
}

type managementClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementClient(cc grpc.ClientConnInterface) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) ListKey(ctx context.Context, in *ListKeyRequest, opts ...grpc.CallOption) (*ListKeyResponse, error) {
	out := new(ListKeyResponse)
	err := c.cc.Invoke(ctx, "/mgmt.Management/ListKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GenKey(ctx context.Context, in *GenKeyRequest, opts ...grpc.CallOption) (*GenKeyResponse, error) {
	out := new(GenKeyResponse)
	err := c.cc.Invoke(ctx, "/mgmt.Management/GenKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DelKey(ctx context.Context, in *DelKeyRequest, opts ...grpc.CallOption) (*DelKeyResponse, error) {
	out := new(DelKeyResponse)
	err := c.cc.Invoke(ctx, "/mgmt.Management/DelKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ServerKey(ctx context.Context, in *ServerKeyRequest, opts ...grpc.CallOption) (*ServerKeyResponse, error) {
	out := new(ServerKeyResponse)
	err := c.cc.Invoke(ctx, "/mgmt.Management/ServerKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListSshKey(ctx context.Context, in *ListSshKeyRequest, opts ...grpc.CallOption) (*ListSshKeyResponse, error) {
	out := new(ListSshKeyResponse)
	err := c.cc.Invoke(ctx, "/mgmt.Management/ListSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AddSshKey(ctx context.Context, in *AddSshKeyRequest, opts ...grpc.CallOption) (*AddSshKeyResponse, error) {
	out := new(AddSshKeyResponse)
	err := c.cc.Invoke(ctx, "/mgmt.Management/AddSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DelSshKey(ctx context.Context, in *DelSshKeyRequest, opts ...grpc.CallOption) (*DelSshKeyResponse, error) {
	out := new(DelSshKeyResponse)
	err := c.cc.Invoke(ctx, "/mgmt.Management/DelSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/mgmt.Management/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListConnector(ctx context.Context, in *ListConnectorRequest, opts ...grpc.CallOption) (*ListConnectorResponse, error) {
	out := new(ListConnectorResponse)
	err := c.cc.Invoke(ctx, "/mgmt.Management/ListConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AddConnector(ctx context.Context, in *AddConnectorRequest, opts ...grpc.CallOption) (*AddConnectorResponse, error) {
	out := new(AddConnectorResponse)
	err := c.cc.Invoke(ctx, "/mgmt.Management/AddConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DelConnector(ctx context.Context, in *DelConnectorRequest, opts ...grpc.CallOption) (*DelConnectorResponse, error) {
	out := new(DelConnectorResponse)
	err := c.cc.Invoke(ctx, "/mgmt.Management/DelConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) TestConnector(ctx context.Context, in *TestConnectorRequest, opts ...grpc.CallOption) (*TestConnectorResponse, error) {
	out := new(TestConnectorResponse)
	err := c.cc.Invoke(ctx, "/mgmt.Management/TestConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServer is the server API for Management service.
// All implementations must embed UnimplementedManagementServer
// for forward compatibility
type ManagementServer interface {
	ListKey(context.Context, *ListKeyRequest) (*ListKeyResponse, error)
	GenKey(context.Context, *GenKeyRequest) (*GenKeyResponse, error)
	DelKey(context.Context, *DelKeyRequest) (*DelKeyResponse, error)
	ServerKey(context.Context, *ServerKeyRequest) (*ServerKeyResponse, error)
	ListSshKey(context.Context, *ListSshKeyRequest) (*ListSshKeyResponse, error)
	AddSshKey(context.Context, *AddSshKeyRequest) (*AddSshKeyResponse, error)
	DelSshKey(context.Context, *DelSshKeyRequest) (*DelSshKeyResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	ListConnector(context.Context, *ListConnectorRequest) (*ListConnectorResponse, error)
	AddConnector(context.Context, *AddConnectorRequest) (*AddConnectorResponse, error)
	DelConnector(context.Context, *DelConnectorRequest) (*DelConnectorResponse, error)
	TestConnector(context.Context, *TestConnectorRequest) (*TestConnectorResponse, error)
	mustEmbedUnimplementedManagementServer()
}

// UnimplementedManagementServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (UnimplementedManagementServer) ListKey(context.Context, *ListKeyRequest) (*ListKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKey not implemented")
}
func (UnimplementedManagementServer) GenKey(context.Context, *GenKeyRequest) (*GenKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenKey not implemented")
}
func (UnimplementedManagementServer) DelKey(context.Context, *DelKeyRequest) (*DelKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelKey not implemented")
}
func (UnimplementedManagementServer) ServerKey(context.Context, *ServerKeyRequest) (*ServerKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerKey not implemented")
}
func (UnimplementedManagementServer) ListSshKey(context.Context, *ListSshKeyRequest) (*ListSshKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSshKey not implemented")
}
func (UnimplementedManagementServer) AddSshKey(context.Context, *AddSshKeyRequest) (*AddSshKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSshKey not implemented")
}
func (UnimplementedManagementServer) DelSshKey(context.Context, *DelSshKeyRequest) (*DelSshKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSshKey not implemented")
}
func (UnimplementedManagementServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedManagementServer) ListConnector(context.Context, *ListConnectorRequest) (*ListConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnector not implemented")
}
func (UnimplementedManagementServer) AddConnector(context.Context, *AddConnectorRequest) (*AddConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConnector not implemented")
}
func (UnimplementedManagementServer) DelConnector(context.Context, *DelConnectorRequest) (*DelConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelConnector not implemented")
}
func (UnimplementedManagementServer) TestConnector(context.Context, *TestConnectorRequest) (*TestConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnector not implemented")
}
func (UnimplementedManagementServer) mustEmbedUnimplementedManagementServer() {}

// UnsafeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServer will
// result in compilation errors.
type UnsafeManagementServer interface {
	mustEmbedUnimplementedManagementServer()
}

func RegisterManagementServer(s grpc.ServiceRegistrar, srv ManagementServer) {
	s.RegisterService(&Management_ServiceDesc, srv)
}

func _Management_ListKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.Management/ListKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListKey(ctx, req.(*ListKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GenKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GenKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.Management/GenKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GenKey(ctx, req.(*GenKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DelKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DelKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.Management/DelKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DelKey(ctx, req.(*DelKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ServerKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ServerKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.Management/ServerKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ServerKey(ctx, req.(*ServerKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSshKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.Management/ListSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListSshKey(ctx, req.(*ListSshKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AddSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSshKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AddSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.Management/AddSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AddSshKey(ctx, req.(*AddSshKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DelSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSshKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DelSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.Management/DelSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DelSshKey(ctx, req.(*DelSshKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.Management/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.Management/ListConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListConnector(ctx, req.(*ListConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AddConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AddConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.Management/AddConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AddConnector(ctx, req.(*AddConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DelConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DelConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.Management/DelConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DelConnector(ctx, req.(*DelConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_TestConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).TestConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.Management/TestConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).TestConnector(ctx, req.(*TestConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Management_ServiceDesc is the grpc.ServiceDesc for Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mgmt.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKey",
			Handler:    _Management_ListKey_Handler,
		},
		{
			MethodName: "GenKey",
			Handler:    _Management_GenKey_Handler,
		},
		{
			MethodName: "DelKey",
			Handler:    _Management_DelKey_Handler,
		},
		{
			MethodName: "ServerKey",
			Handler:    _Management_ServerKey_Handler,
		},
		{
			MethodName: "ListSshKey",
			Handler:    _Management_ListSshKey_Handler,
		},
		{
			MethodName: "AddSshKey",
			Handler:    _Management_AddSshKey_Handler,
		},
		{
			MethodName: "DelSshKey",
			Handler:    _Management_DelSshKey_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Management_Shutdown_Handler,
		},
		{
			MethodName: "ListConnector",
			Handler:    _Management_ListConnector_Handler,
		},
		{
			MethodName: "AddConnector",
			Handler:    _Management_AddConnector_Handler,
		},
		{
			MethodName: "DelConnector",
			Handler:    _Management_DelConnector_Handler,
		},
		{
			MethodName: "TestConnector",
			Handler:    _Management_TestConnector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mgmt.proto",
}
